#ifndef WARBLER_TOKEN_H
#define WARBLER_TOKEN_H

// local includes
#include <warbler/file.h>
#include <warbler/util/primitives.h>
#include <warbler/util/string.h>

typedef enum TokenType
{
	TOKEN_END_OF_FILE,
	TOKEN_IDENTIFIER,
	TOKEN_LEFT_PARENTHESIS,
	TOKEN_RIGHT_PARENTHESIS,
	TOKEN_LEFT_BRACKET,
	TOKEN_RIGHT_BRACKET,
	TOKEN_LEFT_BRACE,
	TOKEN_RIGHT_BRACE,
	TOKEN_SEMICOLON,
	TOKEN_COLON,
	TOKEN_COMMA,
	TOKEN_DOT,
	TOKEN_RANGE,
	TOKEN_ELIPSIS,
	TOKEN_AMPERSAND,
	TOKEN_PIPE,
	TOKEN_CARROT,
	TOKEN_LEFT_BIT_SHIFT,
	TOKEN_RIGHT_BIT_SHIFT,
	TOKEN_BOOLEAN_NOT,
	TOKEN_BOOLEAN_AND,
	TOKEN_BOOLEAN_OR,
	TOKEN_BITWISE_NOT,
	TOKEN_BITWISE_XOR,
	TOKEN_EQUALS,
	TOKEN_NOT_EQUALS,
	TOKEN_LESS_THAN_OR_EQUAL_TO,
	TOKEN_GREATER_THAN_OR_EQUAL_TO,
	TOKEN_LESS_THAN,
	TOKEN_GREATER_THAN,
	TOKEN_SINGLE_ARROW,
	TOKEN_DOUBLE_ARROW,
	TOKEN_OPTION,
	TOKEN_QUESTION,
	TOKEN_ASSIGN,
	TOKEN_ADD_ASSIGN,
	TOKEN_SUBTRACT_ASSIGN,
	TOKEN_MULTIPLY_ASSIGN,
	TOKEN_DIVIDE_ASSIGN,
	TOKEN_MODULUS_ASSIGN,
	TOKEN_LEFT_BIT_SHIFT_ASSIGN,
	TOKEN_RIGHT_BIT_SHIFT_ASSIGN,
	TOKEN_BITWISE_AND_ASSIGN,
	TOKEN_BITWISE_OR_ASSIGN,
	TOKEN_BITWISE_XOR_ASSIGN,
	TOKEN_BOOLEAN_OR_ASSIGN,
	TOKEN_BOOLEAN_AND_ASSIGN,
	TOKEN_MODULUS,
	TOKEN_SLASH,
	TOKEN_ASTERISK,
	TOKEN_PLUS,
	TOKEN_MINUS,
	TOKEN_SCOPE,
	TOKEN_INTEGER_LITERAL,
	TOKEN_FLOAT_LITERAL,
	TOKEN_CHARACTER_LITERAL,
	TOKEN_STRING_LITERAL,
	TOKEN_KEYWORD_BREAK,
	TOKEN_KEYWORD_CASE,
	TOKEN_KEYWORD_CONTINUE,
	TOKEN_KEYWORD_ELSE,
	TOKEN_KEYWORD_ENUM,
	TOKEN_KEYWORD_EXPORT,
	TOKEN_KEYWORD_FALSE,
	TOKEN_KEYWORD_FOR,
	TOKEN_KEYWORD_FUNCTION,
	TOKEN_KEYWORD_IF,
	TOKEN_KEYWORD_IMPORT,
	TOKEN_KEYWORD_LOOP,
	TOKEN_KEYWORD_MATCH,
	TOKEN_KEYWORD_MUT,
	TOKEN_KEYWORD_PRIVATE,
	TOKEN_KEYWORD_PUBLIC,
	TOKEN_KEYWORD_RETURN,
	TOKEN_KEYWORD_STRUCT,
	TOKEN_KEYWORD_THEN,
	TOKEN_KEYWORD_TRUE,
	TOKEN_KEYWORD_TYPE,
	TOKEN_KEYWORD_UNION,
	TOKEN_KEYWORD_VAR,
	TOKEN_KEYWORD_WHILE
} TokenType;

typedef struct Token
{
	const File *file;
	usize pos;
	usize length;
	TokenType type;
} Token;

bool tokenIsSame(const Token *a, const Token *b);
Token getInitialToken(const File *file);
void incrementToken(Token *token);
const char *tokenCategory(const Token *token);
char *tokenGetText(const Token *token);
char tokenGetChar(const Token *token, usize index);
usize tokenCopyText(char *out, const Token *token);
void stringPushToken(StringBuilder *string, const Token *token);
const char *tokenGetIterator(const Token *token);

#endif
